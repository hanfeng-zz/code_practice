

#include <iostream>
#include <sys/socket.h>
#include <linux/if_packet.h>
#include <sys/stat.h>
#include <net/if.h>
#include <net/ethernet.h>
#include <arpa/inet.h>
#include <linux/bpf_common.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <linux/filter.h>
#include <assert.h>
#include <cstring>
#include <sys/types.h>
#include <fcntl.h>
#include <poll.h>
#include <unistd.h>


 uint8_t vscbuffer[200] = {
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x80, 0x00, 0x0a,
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x01, 0x1b, 0x19, 0x00, 0x00, 0x00, 0x5a, 0x81, 0x59, 0x6c, 0xcc, 0xc0, 0x88, 0xf7, 0x0b, 0x02,
            0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x5a, 0x81, 0x59, 0xff, 0xfe, 0x6c, 0xcc, 0xc0, 0x00, 0x01, 0x15, 0xdf, 0x05, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x80, 0xf8, 0xfe,
            0xff, 0xff, 0x80, 0x5a, 0x81, 0x59, 0xff, 0xfe, 0x6c, 0xcc, 0xc0, 0x00, 0x00, 0xa0,
    };

uint8_t vscbuffer1[200] = {
            //0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x80, 0x00, 0x0a,
            //0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x01, 0x1b, 0x19, 0x00, 0x00, 0x00, 0x5a, 0x81, 0x59, 0x6c, 0xcc, 0xc0, 0x88, 0xf7, 0x0b, 0x02,
            0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x5a, 0x81, 0x59, 0xff, 0xfe, 0x6c, 0xcc, 0xc0, 0x00, 0x01, 0x15, 0xdf, 0x05, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x80, 0xf8, 0xfe,
            0xff, 0xff, 0x80, 0x5a, 0x81, 0x59, 0xff, 0xfe, 0x6c, 0xcc, 0xc0, 0x00, 0x00, 0xa0,
    };
int main(){
    struct sockaddr_ll addr;
    std::string name = "eth0";

    struct ifreq ifreq;
    int fd, index;

    if ((fd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL))) < 0) {
        printf("open socket fd error ,fd = %d,%d\n",fd, errno);
        return -1;
    }

    memset(&ifreq, 0, sizeof(ifreq));
    strncpy(ifreq.ifr_name, name.c_str(), name.size());
    if (ioctl(fd, SIOCGIFINDEX, &ifreq) < 0) {
        printf("ioctl SIOCGIFINDEX error \n");
        return -1;
    }

    index = ifreq.ifr_ifindex;

    memset(&addr, 0, sizeof(addr));
    addr.sll_ifindex = index;
    addr.sll_family = AF_PACKET;
    addr.sll_protocol = htons(ETH_P_ALL);

    if (bind(fd, (struct sockaddr *) &addr, sizeof(addr))) {
        printf("bind error \n");
        
        return -1;
    }

    if (setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, name.c_str(), strlen(name.c_str()))) {
        printf("set sockopt SO_BINDTODEVICE error \n");
        
        return -1;
    }

    while (1) {

        int ret = write(fd, vscbuffer, 100);

        write(fd, vscbuffer1, 100);

        printf("fd:%d ret = %d len = %d, %d\n", fd, ret, strlen((char *)vscbuffer),errno);
        
        sleep(1);
    }
    return 0;
}
